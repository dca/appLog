"use strict";

angular.module("ml", [ "ngResource", "elasticjs.service", "btford.socket-io", "ui.bootstrap" ]).config(function(socketProvider) {
    var mySocket = io.connect("http://localhost:9603");
    socketProvider.ioSocket(mySocket);
}), angular.module("ml").controller("LoggerCtrl", function($scope, ejs, socket) {
    function logPush(log) {
        log.rowColorClass = mapColor[log.level] || "", $scope.logs.push(log);
    }
    function jumpToBottom(element) {
        element.scrollTop = element.scrollHeight;
    }
    var logsTable = document.querySelector("body");
    $scope.logs = [], $scope.height = window.innerHeight - 150, $scope.predicate = "time", 
    $scope.size = 100, $scope.showService = {
        admin: !0,
        system: !0,
        store: !0,
        facade: !0,
        front: !0,
        express: !0
    }, $scope.showLevel = {
        error: !0,
        warning: !0,
        info: !0,
        debug: !0
    };
    var args = {
        level: $scope.showLevel,
        service: $scope.showService,
        size: $scope.size
    };
    ejs.query(args).then(function(data) {
        var logs = data.hits.hits || [];
        logs.forEach(function(log) {
            log.fields && logPush(log.fields);
        }), $scope.total = data.hits.total, setTimeout(function() {
            jumpToBottom(logsTable);
        }, 200);
    }), socket.on("log", function(log) {
        logPush(log), $scope.total++, jumpToBottom(logsTable);
    });
    var mapColor = {
        ERROR: "danger",
        WARNING: "warning"
    };
    $scope.logReloadAll = function() {
        console.log("message"), $scope.logs = [];
        var args = {
            level: $scope.showLevel,
            service: $scope.showService,
            size: $scope.size
        };
        ejs.query(args).then(function(data) {
            var logs = data.hits.hits || [];
            logs.forEach(function(log) {
                log.fields && logPush(log.fields);
            }), $scope.total = data.hits.total, setTimeout(function() {
                jumpToBottom(logsTable);
            }, 200);
        });
    };
}), angular.module("ml").factory("ejs", function($q, $http, ejsResource) {
    function ESQuery() {
        return ejs.Request().indices(index).types(type);
    }
    function query(args) {
        args = args || {};
        var ES = new ESQuery();
        return ES.query(ejs.MatchAllQuery()).filter(ejs.AndFilter([ ejs.QueryFilter(ejs.FieldQuery("level", genQueryByTrue(args.level))), ejs.QueryFilter(ejs.FieldQuery("service", genQueryByTrue(args.service))) ])).fields([ "level", "time", "service", "message", "stackStr" ]).sort("time", "desc").size(args.size || 10).doSearch();
    }
    function genQueryByTrue(obj) {
        var _obj = [];
        return angular.forEach(obj, function(value, key) {
            value && _obj.push(key);
        }), _obj.join(" or ");
    }
    var ejs = ejsResource("http://localhost:9200"), index = "dca", type = "logger_test";
    return {
        query: query
    };
});